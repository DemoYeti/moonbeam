window.SIDEBAR_ITEMS = {"fn":[["change_existing_asset_type","Change the xcm type mapping for a given assetId We also change this if the previous units per second where pointing at the old assetType"],["destroy_foreign_asset","Destroy a given foreign assetId The weight in this case is the one returned by the trait plus the db writes and reads from removing all the associated data"],["destroy_local_asset","Destroy a given local assetId We do not store anything related to local assets in this pallet other than the counter and the counter is not used for destroying the asset, so no additional db reads/writes to be counter here"],["register_foreign_asset","Register new asset with the asset manager"],["register_local_asset","Register a new local asset No information is stored in this pallet about the local asset The reason is that we dont need to hold a mapping between the multilocation and the local asset, as this conversion is deterministic Further, we dont allow xcm fee payment in local assets"],["remove_existing_asset_type","Remove a given assetId -> assetType association"],["remove_supported_asset","NOTE: This function is an automatically generated, doc only, uncallable stub. designed to document the [`remove_supported_asset`][`Call::remove_supported_asset`] variant of the pallet [`Call`] enum. You should not attempt to call this function directly."],["set_asset_units_per_second","Change the amount of units we are charging per execution second for a given ForeignAssetType"]]};