// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("moonbase-dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `CouncilCollective::Members` (r:1 w:1)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:0)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:100 w:100)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:0 w:1)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2021 ±0) + p * (2026 ±0)`
		//  Estimated: `12238 + m * (1231 ±15) + p * (3660 ±15)`
		// Minimum execution time: 14_955_000 picoseconds.
		Weight::from_parts(15_221_000, 0)
			.saturating_add(Weight::from_parts(0, 12238))
			// Standard Error: 45_358
			.saturating_add(Weight::from_parts(3_368_795, 0).saturating_mul(m.into()))
			// Standard Error: 45_358
			.saturating_add(Weight::from_parts(6_725_941, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1231).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3660).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149 + m * (20 ±0)`
		//  Estimated: `1634 + m * (20 ±0)`
		// Minimum execution time: 15_460_000 picoseconds.
		Weight::from_parts(14_719_243, 0)
			.saturating_add(Weight::from_parts(0, 1634))
			// Standard Error: 22
			.saturating_add(Weight::from_parts(1_600, 0).saturating_mul(b.into()))
			// Standard Error: 227
			.saturating_add(Weight::from_parts(12_980, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:0)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149 + m * (20 ±0)`
		//  Estimated: `3614 + m * (20 ±0)`
		// Minimum execution time: 18_193_000 picoseconds.
		Weight::from_parts(17_256_485, 0)
			.saturating_add(Weight::from_parts(0, 3614))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(1_556, 0).saturating_mul(b.into()))
			// Standard Error: 245
			.saturating_add(Weight::from_parts(20_097, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalCount` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:0 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395 + m * (20 ±0) + p * (36 ±0)`
		//  Estimated: `3789 + m * (21 ±0) + p * (36 ±0)`
		// Minimum execution time: 20_623_000 picoseconds.
		Weight::from_parts(19_552_944, 0)
			.saturating_add(Weight::from_parts(0, 3789))
			// Standard Error: 86
			.saturating_add(Weight::from_parts(3_377, 0).saturating_mul(b.into()))
			// Standard Error: 903
			.saturating_add(Weight::from_parts(21_768, 0).saturating_mul(m.into()))
			// Standard Error: 892
			.saturating_add(Weight::from_parts(188_485, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `870 + m * (40 ±0)`
		//  Estimated: `4334 + m * (40 ±0)`
		// Minimum execution time: 23_130_000 picoseconds.
		Weight::from_parts(23_769_871, 0)
			.saturating_add(Weight::from_parts(0, 4334))
			// Standard Error: 361
			.saturating_add(Weight::from_parts(31_359, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447 + m * (40 ±0) + p * (36 ±0)`
		//  Estimated: `3892 + m * (41 ±0) + p * (36 ±0)`
		// Minimum execution time: 21_977_000 picoseconds.
		Weight::from_parts(22_866_160, 0)
			.saturating_add(Weight::from_parts(0, 3892))
			// Standard Error: 1_376
			.saturating_add(Weight::from_parts(34_634, 0).saturating_mul(m.into()))
			// Standard Error: 1_341
			.saturating_add(Weight::from_parts(181_713, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4108 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 36_619_000 picoseconds.
		Weight::from_parts(36_359_960, 0)
			.saturating_add(Weight::from_parts(0, 4108))
			// Standard Error: 104
			.saturating_add(Weight::from_parts(2_616, 0).saturating_mul(b.into()))
			// Standard Error: 1_100
			.saturating_add(Weight::from_parts(21_706, 0).saturating_mul(m.into()))
			// Standard Error: 1_072
			.saturating_add(Weight::from_parts(202_828, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:1 w:0)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516 + m * (30 ±0) + p * (36 ±0)`
		//  Estimated: `3958 + m * (31 ±0) + p * (36 ±0)`
		// Minimum execution time: 23_867_000 picoseconds.
		Weight::from_parts(25_387_380, 0)
			.saturating_add(Weight::from_parts(0, 3958))
			// Standard Error: 1_064
			.saturating_add(Weight::from_parts(30_050, 0).saturating_mul(m.into()))
			// Standard Error: 1_037
			.saturating_add(Weight::from_parts(178_528, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:1 w:0)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `811 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4128 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 39_279_000 picoseconds.
		Weight::from_parts(38_370_167, 0)
			.saturating_add(Weight::from_parts(0, 4128))
			// Standard Error: 106
			.saturating_add(Weight::from_parts(2_840, 0).saturating_mul(b.into()))
			// Standard Error: 1_130
			.saturating_add(Weight::from_parts(22_614, 0).saturating_mul(m.into()))
			// Standard Error: 1_101
			.saturating_add(Weight::from_parts(204_770, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:0 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264 + p * (32 ±0)`
		//  Estimated: `1749 + p * (32 ±0)`
		// Minimum execution time: 12_543_000 picoseconds.
		Weight::from_parts(13_669_055, 0)
			.saturating_add(Weight::from_parts(0, 1749))
			// Standard Error: 755
			.saturating_add(Weight::from_parts(151_192, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
}
